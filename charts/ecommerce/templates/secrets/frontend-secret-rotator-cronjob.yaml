{{- if .Values.frontendSecretRotation.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: frontend-secret-rotator-cronjob
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: frontend-secret-rotator
    # Si tenías otros labels aquí o un include, puedes mantenerlos o ajustarlos
spec:
  # Horario de ejecución del CronJob. Ejemplo: cada 5 minutos
  # ADVERTENCIA: '*/1 * * * *' (cada minuto) es muy frecuente y puede causar problemas.
  schedule: {{ .Values.frontendSecretRotation.schedule | quote }} 
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: frontend-secret-rotator-sa
          restartPolicy: OnFailure
          containers:
          - name: secret-rotator
            image: bitnami/kubectl:latest # Imagen con kubectl
            imagePullPolicy: IfNotPresent
            env: # Variable de entorno para pasar el nombre del deployment del frontend
            - name: FRONTEND_DEPLOYMENT_NAME
              # Tomar el nombre del deployment de values.yaml, con "frontend" como default si no se especifica.
              # Es mejor que el valor siempre esté en values.yaml para evitar sorpresas.
              value: {{ .Values.frontendDeploymentName | quote }}
            command:
            - /bin/sh
            - -c
            - |
              set -e # Salir inmediatamente si un comando falla

              echo "Starting frontend secret rotation..."
              SECRET_NAME="frontend-secret"
              NAMESPACE="{{ .Release.Namespace }}"
              SECRET_KEY_NAME="SECRET_TEXT"
              BASE_SECRET_VALUE="{{ .Values.frontendSecretRotation.baseSecretValue }}"
              
              # Verificar que FRONTEND_DEPLOYMENT_NAME no esté vacío
              if [ -z "$FRONTEND_DEPLOYMENT_NAME" ]; then
                echo "Error: FRONTEND_DEPLOYMENT_NAME environment variable is not set or empty."
                exit 1
              fi

              # Generar sufijo aleatorio
              RANDOM_SUFFIX=$(head /dev/urandom | tr -dc A-Za-z | head -c 5)
              NEW_PLAIN_VALUE="${BASE_SECRET_VALUE}-${RANDOM_SUFFIX}"
              
              echo "New plain value for $SECRET_KEY_NAME: $NEW_PLAIN_VALUE"
              
              # Construir el payload JSON para el patch del secret
              JSON_PATCH_PAYLOAD="{\"stringData\":{\"$SECRET_KEY_NAME\":\"$NEW_PLAIN_VALUE\"}}"

              echo "Attempting to patch secret '$SECRET_NAME' in namespace '$NAMESPACE' with payload: $JSON_PATCH_PAYLOAD"
              kubectl patch secret "$SECRET_NAME" -n "$NAMESPACE" --type='merge' -p="$JSON_PATCH_PAYLOAD"
              # La opción -e se encargará de salir si kubectl patch falla

              echo "Successfully patched secret '$SECRET_NAME'."
              
              # --- REINICIAR EL DEPLOYMENT DEL FRONTEND ---
              echo "Attempting to rollout restart deployment '$FRONTEND_DEPLOYMENT_NAME' in namespace '$NAMESPACE'..."
              kubectl rollout restart deployment "$FRONTEND_DEPLOYMENT_NAME" -n "$NAMESPACE"
              # La opción -e se encargará de salir si kubectl rollout restart falla,
              # aunque podríamos querer un manejo de error más granular aquí si el reinicio es opcional.

              echo "Successfully triggered rollout restart for deployment '$FRONTEND_DEPLOYMENT_NAME'."
{{- end }}
