{{- if .Values.frontendSecretRotation.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: frontend-secret-rotator-cronjob
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: frontend-secret-rotator
    {{- include "ecommerce.labels" . | nindent 4 }}
spec:
  # Ejecutar cada minuto: '*/1 * * * *'
  # Ejecutar cada 5 minutos: '*/5 * * * *'
  # Ejecutar cada hora: '0 * * * *'
  schedule: {{ .Values.frontendSecretRotation.schedule | quote }} # e.g., "*/5 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: frontend-secret-rotator-sa
          restartPolicy: OnFailure
          containers:
          - name: secret-rotator
            # Imagen con kubectl y herramientas básicas de shell
            image: bitnami/kubectl:latest # O alpine/k8s u otra imagen similar
            imagePullPolicy: IfNotPresent
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting frontend secret rotation..."
              SECRET_NAME="frontend-secret"
              NAMESPACE="{{ .Release.Namespace }}"
              SECRET_KEY_NAME="SECRET_TEXT" # La clave dentro de stringData
              BASE_SECRET_VALUE="{{ .Values.frontendSecretRotation.baseSecretValue }}" # e.g., "default-secret-if-not-overridden"

              # Generar 5 letras aleatorias (mayúsculas y minúsculas)
              RANDOM_SUFFIX=$(head /dev/urandom | tr -dc A-Za-z | head -c 5)
              
              NEW_PLAIN_VALUE="${BASE_SECRET_VALUE}-${RANDOM_SUFFIX}"
              
              echo "New plain value for $SECRET_KEY_NAME: $NEW_PLAIN_VALUE"
              
              # Para stringData, el valor debe ser la cadena plana.
              # Kubectl patch con stringData:
              # Formato del patch: '{"stringData":{"SECRET_KEY_NAME":"NEW_PLAIN_VALUE"}}'
              # Necesitamos escapar las comillas para el JSON dentro del comando sh -c
              JSON_PATCH_PAYLOAD="{\"stringData\":{\"$SECRET_KEY_NAME\":\"$NEW_PLAIN_VALUE\"}}"

              echo "Attempting to patch secret $SECRET_NAME in namespace $NAMESPACE with payload: $JSON_PATCH_PAYLOAD"
              
              kubectl patch secret "$SECRET_NAME" -n "$NAMESPACE" --type='merge' -p="$JSON_PATCH_PAYLOAD"
              
              if [ $? -eq 0 ]; then
                echo "Successfully patched secret $SECRET_NAME."
              else
                echo "Error: Failed to patch secret $SECRET_NAME."
                # Opcional: obtener el secreto para ver su estado actual si falla el patch
                # kubectl get secret "$SECRET_NAME" -n "$NAMESPACE" -o yaml
                exit 1
              fi
{{- end }}