apiVersion: v1
kind: Namespace
metadata:
  name: argocd

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-install-script
  namespace: argocd
data:
  install.sh: |
    #!/bin/bash
    echo "Installing ArgoCD..."
    
    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
    
    echo "Waiting for ArgoCD to be ready..."
    kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
    kubectl wait --for=condition=available --timeout=300s deployment/argocd-application-controller -n argocd
    
    echo "ArgoCD installed successfully!"
    
    echo "Initial admin password:"
    kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
    echo ""

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-server-config
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-server-config
    app.kubernetes.io/part-of: argocd
data:
  url: https://argocd.yourdomain.com
  insecure: "true"
  
  repositories: |
    - type: git
      url: https://github.com/YOUR_ORG/helm-charts-repo.git
      name: helm-charts
    - type: git
      url: https://github.com/YOUR_ORG/ecommerce-microservice-backend-app.git
      name: app-source

  policy.default: role:readonly
  policy.csv: |
    p, role:admin, applications, *, */*, allow
    p, role:admin, clusters, *, *, allow
    p, role:admin, repositories, *, *, allow
    
    p, role:developer, applications, get, */*, allow
    p, role:developer, applications, sync, ecommerce-project/ecommerce-dev, allow
    
    g, ecommerce-admins, role:admin
    g, ecommerce-developers, role:developer

---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: app-of-apps
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "0"
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: https://github.com/YOUR_ORG/helm-charts-repo.git
    targetRevision: HEAD
    path: argocd/applications
  destination:
    server: https://kubernetes.default.svc
    namespace: argocd
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground

---
apiVersion: v1
kind: Service
metadata:
  name: argocd-server-nodeport
  namespace: argocd
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30080
      name: http
    - port: 443
      targetPort: 8080
      nodePort: 30443
      name: https
  selector:
    app.kubernetes.io/name: argocd-server