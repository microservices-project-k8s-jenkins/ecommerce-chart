name: Update Image Tags in Helm Chart

on:
  repository_dispatch:
    types: [update-image-tags]

jobs:
  update-chart-values:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Chart Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CHARTS_REPO_TOKEN }}

      - name: Install yq and jq
        run: |
          echo "Installing yq..."
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          echo "yq version: $(yq --version)"
          echo "Installing jq..."
          sudo apt-get update && sudo apt-get install -y jq
          echo "jq version: $(jq --version)"

      - name: Update Image Details in values-master.yaml
        id: update_values
        run: |
          echo "Received client payload for image update:"
          echo "${{ toJSON(github.event.client_payload) }}"

          BASE_VERSION_TAG="${{ github.event.client_payload.base_version_tag }}"
          ECR_REGISTRY_URI="${{ github.event.client_payload.ecr_registry_uri }}"
          ECR_REPOSITORY_NAME="${{ github.event.client_payload.ecr_repository_name }}"
          SERVICES_JSON_STRING='${{ toJSON(github.event.client_payload.services_to_update) }}'

          # Define VALUES_FILE aquí para este step
          VALUES_FILE_PATH="charts/ecommerce/values-master.yaml" 

          if [ ! -f "$VALUES_FILE_PATH" ]; then
            echo "Error: Values file '$VALUES_FILE_PATH' not found in this repository!"
            exit 1
          fi
          # ... (resto de la lógica de actualización usando VALUES_FILE_PATH) ...
          # Asegúrate de reemplazar todas las instancias de ${VALUES_FILE} con ${VALUES_FILE_PATH} en este script
          # Ejemplo:
          yq eval ".${service_name}.image.repository = \"${FULL_ECR_IMAGE_BASE_PATH}\"" -i "${VALUES_FILE_PATH}"
          yq eval ".${service_name}.image.tag = \"${NEW_IMAGE_TAG_FOR_SERVICE}\"" -i "${VALUES_FILE_PATH}"
          # ...
          echo "--- Final ${VALUES_FILE_PATH} content after updates ---"
          cat "${VALUES_FILE_PATH}"
          echo "--- End of ${VALUES_FILE_PATH} content ---"
          
          # Exportar la ruta del archivo para el siguiente step
          echo "VALUES_FILE_TO_COMMIT=${VALUES_FILE_PATH}" >> $GITHUB_ENV

      - name: Commit and Push Changes
        # Usar la variable de entorno establecida en el step anterior
        env:
          VALUES_FILE_FOR_GIT: ${{ env.VALUES_FILE_TO_COMMIT }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Añadir un log para verificar el valor de VALUES_FILE_FOR_GIT
          echo "File path for git operations: '${VALUES_FILE_FOR_GIT}'"

          if [ -z "${VALUES_FILE_FOR_GIT}" ]; then
            echo "Error: VALUES_FILE_FOR_GIT is empty. Cannot proceed with git operations."
            exit 1
          fi

          # Check if there are any changes in the values file
          if ! git diff --quiet "${VALUES_FILE_FOR_GIT}"; then
            echo "Changes detected in '${VALUES_FILE_FOR_GIT}'. Committing and pushing..."
            git add "${VALUES_FILE_FOR_GIT}"
            COMMIT_MESSAGE="Update Helm chart: Image tags to base version ${{ github.event.client_payload.base_version_tag }}

            ECR Base: ${{ github.event.client_payload.ecr_registry_uri }}/${{ github.event.client_payload.ecr_repository_name }}
            Triggered from: ${{ github.event.client_payload.source_branch }} branch of microservices repo"
            git commit -m "$COMMIT_MESSAGE"
            git push 
            echo "Changes successfully committed and pushed."
          else
            echo "No changes detected in '${VALUES_FILE_FOR_GIT}'. Nothing to commit."
          fi
